package com.rima.model.bubbles.specialBubbles;

import com.rima.model.entities.PlayerModel;
import com.rima.model.utilz.Constants;
import com.rima.model.utilz.Constants.Direction;
import com.rima.model.itemesAndRewards.PowerUpManagerModel;

import static com.rima.model.utilz.Constants.Bubble.BubbleType.WATER_BUBBLE;

/**
 * Represents a water bubble generated by the {@link BubbleGenerator}.
 *
 * <p>This class extends the {@link SpecialBubbleModel} and provides specific behavior for water bubbles.
 * When popped by the player, it spawns a {@link WaterFlowModel} and increases the water bubble pop counter in the {@link PowerUpManagerModel}.
 */
public class WaterBubbleModel extends SpecialBubbleModel {

    /**
     * Constructs a new WaterBubbleModel.
     *
     * @param x the starting x coordinate
     * @param y the starting y coordinate
     * @param direction the starting direction
     */
    public WaterBubbleModel(float x, float y, Direction direction) {
        super(x, y, direction);
        bubbleType = WATER_BUBBLE;
    }

    /**
     * Updates the state and position of the water bubble.
     *
     * <p>This method updates the timers, direction, position, collision boxes, and applies the Pac-Man effect.
     */
    @Override
    public void update() {
        updateTimers();
        updateDirection();
        updatePosition();
        updateCollisionBoxes();
        pacManEffect();
    }

    /**
     * Handles the player popping the water bubble.
     *
     * <p>This method deactivates the bubble, spawns a water flow at the bubble's position, and increases the water bubble pop counter.
     *
     * @param playerModel the player model
     */
    @Override
    public void playerPop(PlayerModel playerModel) {
        active = false;
        spawnWaterFlow();

        PowerUpManagerModel.getInstance().increaseWaterBubblePopCounter();
    }

    /**
     * Spawns a water flow at the bubble's position.
     *
     * <p>This method creates a new {@link WaterFlowModel} and adds it to the {@link SpecialBubbleManagerModel}.
     * If the bubble is near the perimeter walls, the water flow is spawned away from the walls.
     */
    private void spawnWaterFlow() {

        // if waterBubble conpenetrates with left perimeter wall, spawn waterFlow not in the wall
        if (getTileX() < 2) {
            SpecialBubbleManagerModel.getInstance().addWaterFlow(new WaterFlowModel(hitbox.x + Constants.TILES_SIZE, hitbox.y));
            return;
        }

        // if waterBubble conpenetrates with right perimeter wall, spawn waterFlow not in the wall
        if ( getTileX() + Constants.TILES_SIZE > Constants.TILES_IN_WIDTH - 3) {
            SpecialBubbleManagerModel.getInstance().addWaterFlow(new WaterFlowModel(hitbox.x - Constants.TILES_SIZE, hitbox.y));
            return;
        }

        // if the bubble does not concentrate with the perimeter walls, spawn waterFlow in the same position of the bubble
        SpecialBubbleManagerModel.getInstance().addWaterFlow(new WaterFlowModel(hitbox.x, hitbox.y));
    }
}