package com.rima.model.bubbles.specialBubbles;

import com.rima.model.utilz.Constants;
import com.rima.model.bubbles.BubbleModel;
import com.rima.model.entities.PlayerModel;

import static com.rima.model.utilz.Constants.Bubble.*;

/**
 * Represents a special bubble that is not generated by the player, but are automatically generate by a {@link BubbleGenerator}.
 *
 * <p>This abstract class extends the BubbleModel and provides the basic structure and behavior for special bubbles.
 * Special bubbles have unique interactions and behaviors when collided with the player.
 */
public abstract class SpecialBubbleModel extends BubbleModel {

    /**
     * Constructs a new SpecialBubbleModel.
     *
     * @param x the starting x coordinate
     * @param y the starting y coordinate
     * @param direction the starting direction
     */
    public SpecialBubbleModel(float x, float y, Constants.Direction direction) {
        super(x, y, direction);
        this.state = BUBBLE;
    }

    /**
     * Updates the state and position of the special bubble.
     */
    public abstract void update();

    /**
     * Handles the player popping the special bubble.
     *
     * @param playerModel the player model
     */
    public abstract void playerPop(PlayerModel playerModel);

    /**
     * Checks for collisions with the player and handles the interaction.
     *
     * <p>If the player is popping the bubble, it calls the {@link #playerPop(PlayerModel)} method.
     * <p>If the player is touching the bubble, it handles the interaction based on the player's position and state:
     * <ul>
     *   <li>If the player is jumping on the bubble, the bubble bounces down and the player jumps on the bubble.</li>
     *   <li>If the player is pushing the bubble, the bubble's position is adjusted based on the player's push direction.</li>
     * </ul>
     *
     * @param playerModel the player model
     */
    @Override
    public void checkCollisionWithPlayer(PlayerModel playerModel) {
        if (!playerModel.isActive())
            return;

        if (isPlayerPoppingBubble(playerModel)) {
            playerPop(playerModel);
            return;
        }

        if (isPlayerTouchingBubble(playerModel)) {

            if (isPlayerJumpingOnBubble(playerModel)) {
                bounceDown();
                playerModel.jumpOnBubble();
                return;
            }

            handlePlayerPush(playerModel);
        }
    }
}