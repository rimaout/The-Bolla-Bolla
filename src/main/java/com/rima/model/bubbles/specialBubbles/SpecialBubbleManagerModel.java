package com.rima.model.bubbles.specialBubbles;

import com.rima.model.entities.PlayerModel;
import com.rima.model.levels.LevelManagerModel;

import java.util.LinkedList;

/**
 * Manages special bubbles that are not generated by the player, such as water bubbles and lighting bubbles.
 *
 * <p>This singleton class is responsible for updating, adding, and managing the state of special bubbles and water flows ({@link WaterFlowModel}).
 * It interacts with the {@link PlayerModel} and the {@link LevelManagerModel} to handle bubble generation and collisions.
 */
public class SpecialBubbleManagerModel {

    private static SpecialBubbleManagerModel instance;
    private final PlayerModel playerModel;

    private final LinkedList<SpecialBubbleModel> bubblesModels;
    private final LinkedList<WaterFlowModel> waterFlowsModel;

    private BubbleGenerator bubbleGenerator;

    /**
     * Private constructor used for singleton pattern.
     */
    private SpecialBubbleManagerModel() {
        this.playerModel = PlayerModel.getInstance();
        bubblesModels = new LinkedList<>();
        waterFlowsModel = new LinkedList<>();
    }

    /**
     * Returns the singleton instance of the SpecialBubbleManagerModel.
     *
     * @return the singleton instance
     */
    public static SpecialBubbleManagerModel getInstance() {
        if (instance == null) {
            instance = new SpecialBubbleManagerModel();
        }
        return instance;
    }

    /**
     * Updates the state of all active special bubbles and water flows.
     *
     * <p>This method updates the bubble generator, checks for collisions with the player, and updates the state of each bubble and water flow.
     */
    public void update() {
        bubbleGenerator.update();

        for (SpecialBubbleModel b : bubblesModels) {
            if (b.isActive()) {
                b.update();
                b.checkCollisionWithPlayer(playerModel);
            }
        }

        for (WaterFlowModel w : waterFlowsModel) {
            if (w.isActive()) {
                w.update();
                w.updateCollisions(playerModel);
            }
        }
    }

    /**
     * Loads the bubble generator ({@link BubbleGenerator}) for the current level.
     */
    public void loadBubbleGenerator() {
        bubbleGenerator = LevelManagerModel.getInstance().getCurrentLevel().getBubbleGenerator();
    }

    /**
     * Resets the state of the manager for a new level.
     *
     * <p>This method clears all active bubbles and water flows.
     */
    public void newLevelReset() {
        bubblesModels.clear();
        waterFlowsModel.clear();
    }

    /**
     * Resets the state of the manager for a new play session.
     *
     * <p>This method calls {@link #newLevelReset()} to clear all active bubbles and water flows.
     */
    public void newPlayReset() {
        newLevelReset();
    }

    /**
     * Adds a new special bubble to the manager.
     *
     * @param bubble the special bubble to add
     */
    public void addBubble(SpecialBubbleModel bubble) {
        bubblesModels.add(bubble);
    }

    /**
     * Adds a new water flow to the manager.
     *
     * @param waterFlowModels the water flow to add
     */
    public void addWaterFlow(WaterFlowModel waterFlowModels) {
        waterFlowsModel.add(waterFlowModels);
    }

    /**
     * Returns the count of active special bubbles.
     *
     * @return the count of active special bubbles
     */
    public int getActiveBubblesCount() {
        int count = 0;
        for (SpecialBubbleModel b : bubblesModels) {
            if (b.isActive())
                count++;
        }
        return count;
    }

    // ------- Getters -------

    /**
     * Returns the list of special bubbles managed by this class.
     *
     * @return the list of special bubbles
     */
    public LinkedList<SpecialBubbleModel> getBubblesModels() {
        return bubblesModels;
    }

    /**
     * Returns the list of water flows managed by this class.
     *
     * @return the list of water flows
     */
    public LinkedList<WaterFlowModel> getWaterFlowsModels() {
        return waterFlowsModel;
    }
}